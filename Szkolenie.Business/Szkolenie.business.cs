
//----------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a tool.
//		Changes to this file may cause incorrect behaviour and will be lost 
//		if the code is regenerated.
// </autogenerated>
//----------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
using Soneta.Types;
using Soneta.Business;
using Soneta.Business.Db;
using Soneta.Business.App;
using Soneta.Core;
using Soneta.Core.DbTuples;
using Soneta.Handel;
using Soneta.Produkcja;
using Soneta.Kadry;
using Soneta.Place;
using Soneta.Kalend;
using Soneta.CRM;
using Soneta.CRM.Config;
using Soneta.Zadania;
using Soneta.Ksiega;
using Soneta.Towary;
using Soneta.Magazyny;
using Soneta.Kasa;
using Soneta.Waluty;
using Soneta.HR;
using Soneta.Types;
using Szkolenie.Business;
using Szkolenie.Tabele;
using Szkolenie.Tabele.Rows;
using Szkolenie.Business;

[assembly: ModuleType("Szkolenie", typeof(Szkolenie.Business.SzkolenieModule), 4, "Szkolenie", 1, VersionNumber=2)]

namespace Szkolenie.Business {

	/// <summary>
	/// Moduł Szkolenie.
	/// <seealso cref="Soneta.Business.Db"/>
	/// <seealso cref="Soneta.Business.App"/>
	/// <seealso cref="Soneta.Core"/>
	/// <seealso cref="Soneta.Core.DbTuples"/>
	/// <seealso cref="Soneta.Handel"/>
	/// <seealso cref="Soneta.Produkcja"/>
	/// <seealso cref="Soneta.Kadry"/>
	/// <seealso cref="Soneta.Place"/>
	/// <seealso cref="Soneta.Kalend"/>
	/// <seealso cref="Soneta.CRM"/>
	/// <seealso cref="Soneta.CRM.Config"/>
	/// <seealso cref="Soneta.Zadania"/>
	/// <seealso cref="Soneta.Ksiega"/>
	/// <seealso cref="Soneta.Towary"/>
	/// <seealso cref="Soneta.Magazyny"/>
	/// <seealso cref="Soneta.Kasa"/>
	/// <seealso cref="Soneta.Waluty"/>
	/// <seealso cref="Soneta.HR"/>
	/// <seealso cref="Soneta.Types"/>
	/// <seealso cref="Szkolenie.Business"/>
	/// <seealso cref="Szkolenie.Tabele"/>
	/// <seealso cref="Szkolenie.Tabele.Rows"/>
	/// </summary>
	/// <seealso cref="Soneta.Business.Module"/>
	/// <seealso cref="Soneta.Business.Session"/>
	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public partial class SzkolenieModule : Module {

		public static SzkolenieModule GetInstance(ISessionable session) => (SzkolenieModule)session?.Session?.Modules[moduleInfo];

		private static Soneta.Business.App.ModuleInfo moduleInfo = new Soneta.Business.App.ModuleInfo(session => new SzkolenieModule(session)) {
		};

		SzkolenieModule(Session session) : base(session) {}

		private BusinessModule moduleBusiness;

		[Browsable(false)]
		public BusinessModule Business => moduleBusiness ?? (moduleBusiness = BusinessModule.GetInstance(Session));

		private CoreModule moduleCore;

		[Browsable(false)]
		public CoreModule Core => moduleCore ?? (moduleCore = CoreModule.GetInstance(Session));

		private HandelModule moduleHandel;

		[Browsable(false)]
		public HandelModule Handel => moduleHandel ?? (moduleHandel = HandelModule.GetInstance(Session));

		private ProdukcjaModule moduleProdukcja;

		[Browsable(false)]
		public ProdukcjaModule Produkcja => moduleProdukcja ?? (moduleProdukcja = ProdukcjaModule.GetInstance(Session));

		private KadryModule moduleKadry;

		[Browsable(false)]
		public KadryModule Kadry => moduleKadry ?? (moduleKadry = KadryModule.GetInstance(Session));

		private PlaceModule modulePlace;

		[Browsable(false)]
		public PlaceModule Place => modulePlace ?? (modulePlace = PlaceModule.GetInstance(Session));

		private KalendModule moduleKalend;

		[Browsable(false)]
		public KalendModule Kalend => moduleKalend ?? (moduleKalend = KalendModule.GetInstance(Session));

		private CRMModule moduleCRM;

		[Browsable(false)]
		public CRMModule CRM => moduleCRM ?? (moduleCRM = CRMModule.GetInstance(Session));

		private ZadaniaModule moduleZadania;

		[Browsable(false)]
		public ZadaniaModule Zadania => moduleZadania ?? (moduleZadania = ZadaniaModule.GetInstance(Session));

		private KsiegaModule moduleKsiega;

		[Browsable(false)]
		public KsiegaModule Ksiega => moduleKsiega ?? (moduleKsiega = KsiegaModule.GetInstance(Session));

		private TowaryModule moduleTowary;

		[Browsable(false)]
		public TowaryModule Towary => moduleTowary ?? (moduleTowary = TowaryModule.GetInstance(Session));

		private MagazynyModule moduleMagazyny;

		[Browsable(false)]
		public MagazynyModule Magazyny => moduleMagazyny ?? (moduleMagazyny = MagazynyModule.GetInstance(Session));

		private KasaModule moduleKasa;

		[Browsable(false)]
		public KasaModule Kasa => moduleKasa ?? (moduleKasa = KasaModule.GetInstance(Session));

		private WalutyModule moduleWaluty;

		[Browsable(false)]
		public WalutyModule Waluty => moduleWaluty ?? (moduleWaluty = WalutyModule.GetInstance(Session));

		private HRModule moduleHR;

		[Browsable(false)]
		public HRModule HR => moduleHR ?? (moduleHR = HRModule.GetInstance(Session));

		private SzkolenieModule moduleSzkolenie;

		[Browsable(false)]
		public SzkolenieModule Szkolenie => moduleSzkolenie ?? (moduleSzkolenie = SzkolenieModule.GetInstance(Session));

		public static readonly Soneta.Business.App.TableInfo PozycjeSzkolenieTableInfo = new Soneta.Business.App.TableInfo.Create<PozycjeSzkolenie, PozycjaSzkolenia, PozycjaSzkoleniaRecord>("PozycjaS") {
		};

		public PozycjeSzkolenie PozycjeSzkolenie => (PozycjeSzkolenie)Session.Tables[PozycjeSzkolenieTableInfo];

		private static Soneta.Business.App.KeyInfo keyInfoPozycjaSzkoleniaWgNazwisko = new Soneta.Business.App.KeyInfo(PozycjeSzkolenieTableInfo, table => new PozycjaSzkoleniaTable.WgNazwiskoKey(table)) {
			Name = "WgNazwisko",
			PrimaryKey = true,
			KeyFields = new[] {"Nazwisko", "ID"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów PozycjaSzkolenia.
		/// Dziedzicząca klasa <see cref="PozycjeSzkolenie"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="PozycjeSzkolenie"/>
		/// <seealso cref="PozycjaSzkoleniaRow"/>
		/// <seealso cref="PozycjaSzkolenia"/>
		/// <seealso cref="Soneta.Business.Table"/>
		public abstract partial class PozycjaSzkoleniaTable : GuidedTable {

			protected PozycjaSzkoleniaTable() {}

			public partial class WgNazwiskoKey : Key<PozycjaSzkolenia> {
				internal WgNazwiskoKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((PozycjaSzkoleniaRecord)rec).Nazwisko.TrimEnd(),
					row.ID
				};

				public SubTable<PozycjaSzkolenia> this[string nazwisko] => new SubTable<PozycjaSzkolenia>(this, nazwisko);
			}

			public WgNazwiskoKey WgNazwisko => (WgNazwiskoKey)Session.Keys[keyInfoPozycjaSzkoleniaWgNazwisko];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="SzkolenieModule"/>
			public new SzkolenieModule Module => (SzkolenieModule)base.Module;

			public System.Linq.IQueryable<PozycjaSzkolenia> AsQuery() => AsQuery<PozycjaSzkolenia>();

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="PozycjaSzkolenia"/>
			public new PozycjaSzkolenia this[int id] => (PozycjaSzkolenia)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="PozycjaSzkolenia"/>
			public new PozycjaSzkolenia[] this[int[] ids] => (PozycjaSzkolenia[])base[ids];

			public new PozycjaSzkolenia this[Guid guid] => (PozycjaSzkolenia)base[guid];

			protected override Row CreateRow(RowCreator creator) => new PozycjaSzkolenia();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("Ilosc");
				names.Append(divider); names.Append("Nazwisko");
				names.Append(divider); names.Append("NazwiskoPanienskie");
			}

		}

		public abstract partial class PozycjaSzkoleniaRow : GuidedRow {

			private PozycjaSzkoleniaRecord record;

			protected override void AssignRecord(Record rec) {
				record = (PozycjaSzkoleniaRecord)rec;
			}

			protected PozycjaSzkoleniaRow() : base(true) {
			}

			protected override Row PrimaryRow => null;

			[Caption("Ilość")]
			[MaxLength(100)]
			public string Ilosc {
				get {
					if (record==null) GetRecord();
					return record.Ilosc;
				}
				set {
					PozycjaSzkoleniaSchema.IloscBeforeEdit?.Invoke((PozycjaSzkolenia)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>IloscLength) throw new ValueToLongException(this, "Ilosc", IloscLength);
					GetEdit(record==null, false);
					record.Ilosc = value;
					PozycjaSzkoleniaSchema.IloscAfterEdit?.Invoke((PozycjaSzkolenia)this);
				}
			}

			public const int IloscLength = 100;

			[Caption("Nazwisko")]
			[MaxLength(100)]
			public string Nazwisko {
				get {
					if (record==null) GetRecord();
					return record.Nazwisko;
				}
				set {
					PozycjaSzkoleniaSchema.NazwiskoBeforeEdit?.Invoke((PozycjaSzkolenia)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>NazwiskoLength) throw new ValueToLongException(this, "Nazwisko", NazwiskoLength);
					GetEdit(record==null, false);
					record.Nazwisko = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoPozycjaSzkoleniaWgNazwisko);
					}
					PozycjaSzkoleniaSchema.NazwiskoAfterEdit?.Invoke((PozycjaSzkolenia)this);
				}
			}

			public const int NazwiskoLength = 100;

			[Caption("Nazwisko")]
			[MaxLength(100)]
			public string NazwiskoPanienskie {
				get {
					if (record==null) GetRecord();
					return record.NazwiskoPanienskie;
				}
				set {
					PozycjaSzkoleniaSchema.NazwiskoPanienskieBeforeEdit?.Invoke((PozycjaSzkolenia)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>NazwiskoPanienskieLength) throw new ValueToLongException(this, "NazwiskoPanienskie", NazwiskoPanienskieLength);
					GetEdit(record==null, false);
					record.NazwiskoPanienskie = value;
					PozycjaSzkoleniaSchema.NazwiskoPanienskieAfterEdit?.Invoke((PozycjaSzkolenia)this);
				}
			}

			public const int NazwiskoPanienskieLength = 100;

			[Browsable(false)]
			public new PozycjeSzkolenie Table => (PozycjeSzkolenie)base.Table;

			[Browsable(false)]
			public SzkolenieModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => PozycjeSzkolenieTableInfo;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				PozycjaSzkoleniaSchema.OnCalcObjectRight?.Invoke((PozycjaSzkolenia)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				PozycjaSzkoleniaSchema.OnCalcParentsObjectRight?.Invoke((PozycjaSzkolenia)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				PozycjaSzkoleniaSchema.OnCalcReadOnly?.Invoke((PozycjaSzkolenia)this, ref result);
				return result;
			}

			protected override void OnAdded() {
				base.OnAdded();
				PozycjaSzkoleniaSchema.OnAdded?.Invoke((PozycjaSzkolenia)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				PozycjaSzkoleniaSchema.OnLoaded?.Invoke((PozycjaSzkolenia)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				PozycjaSzkoleniaSchema.OnEditing?.Invoke((PozycjaSzkolenia)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				PozycjaSzkoleniaSchema.OnDeleting?.Invoke((PozycjaSzkolenia)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				PozycjaSzkoleniaSchema.OnDeleted?.Invoke((PozycjaSzkolenia)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				PozycjaSzkoleniaSchema.OnRepacked?.Invoke((PozycjaSzkolenia)this);
			}

		}

		public sealed class PozycjaSzkoleniaRecord : GuidedRecord {
			[MaxLength(100)]
			public string Ilosc = "";
			[MaxLength(100)]
			public string Nazwisko = "";
			[MaxLength(100)]
			public string NazwiskoPanienskie = "";

			public override Record Clone() {
				PozycjaSzkoleniaRecord rec = (PozycjaSzkoleniaRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				Ilosc = creator.Read_string();
				Nazwisko = creator.Read_string();
				NazwiskoPanienskie = creator.Read_string();
			}
		}

		public static class PozycjaSzkoleniaSchema {

			internal static RowDelegate<PozycjaSzkoleniaRow, string> IloscBeforeEdit;
			public static void AddIloscBeforeEdit(RowDelegate<PozycjaSzkoleniaRow, string> value)
				=> IloscBeforeEdit = (RowDelegate<PozycjaSzkoleniaRow, string>)Delegate.Combine(IloscBeforeEdit, value);

			internal static RowDelegate<PozycjaSzkoleniaRow> IloscAfterEdit;
			public static void AddIloscAfterEdit(RowDelegate<PozycjaSzkoleniaRow> value)
				=> IloscAfterEdit = (RowDelegate<PozycjaSzkoleniaRow>)Delegate.Combine(IloscAfterEdit, value);

			internal static RowDelegate<PozycjaSzkoleniaRow, string> NazwiskoBeforeEdit;
			public static void AddNazwiskoBeforeEdit(RowDelegate<PozycjaSzkoleniaRow, string> value)
				=> NazwiskoBeforeEdit = (RowDelegate<PozycjaSzkoleniaRow, string>)Delegate.Combine(NazwiskoBeforeEdit, value);

			internal static RowDelegate<PozycjaSzkoleniaRow> NazwiskoAfterEdit;
			public static void AddNazwiskoAfterEdit(RowDelegate<PozycjaSzkoleniaRow> value)
				=> NazwiskoAfterEdit = (RowDelegate<PozycjaSzkoleniaRow>)Delegate.Combine(NazwiskoAfterEdit, value);

			internal static RowDelegate<PozycjaSzkoleniaRow, string> NazwiskoPanienskieBeforeEdit;
			public static void AddNazwiskoPanienskieBeforeEdit(RowDelegate<PozycjaSzkoleniaRow, string> value)
				=> NazwiskoPanienskieBeforeEdit = (RowDelegate<PozycjaSzkoleniaRow, string>)Delegate.Combine(NazwiskoPanienskieBeforeEdit, value);

			internal static RowDelegate<PozycjaSzkoleniaRow> NazwiskoPanienskieAfterEdit;
			public static void AddNazwiskoPanienskieAfterEdit(RowDelegate<PozycjaSzkoleniaRow> value)
				=> NazwiskoPanienskieAfterEdit = (RowDelegate<PozycjaSzkoleniaRow>)Delegate.Combine(NazwiskoPanienskieAfterEdit, value);

			internal static RowDelegate<PozycjaSzkoleniaRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<PozycjaSzkoleniaRow> value)
				=> OnLoaded = (RowDelegate<PozycjaSzkoleniaRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<PozycjaSzkoleniaRow> OnAdded;
			public static void AddOnAdded(RowDelegate<PozycjaSzkoleniaRow> value)
				=> OnAdded = (RowDelegate<PozycjaSzkoleniaRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<PozycjaSzkoleniaRow> OnEditing;
			public static void AddOnEditing(RowDelegate<PozycjaSzkoleniaRow> value)
				=> OnEditing = (RowDelegate<PozycjaSzkoleniaRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<PozycjaSzkoleniaRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<PozycjaSzkoleniaRow> value)
				=> OnDeleting = (RowDelegate<PozycjaSzkoleniaRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<PozycjaSzkoleniaRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<PozycjaSzkoleniaRow> value)
				=> OnDeleted = (RowDelegate<PozycjaSzkoleniaRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<PozycjaSzkoleniaRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<PozycjaSzkoleniaRow> value)
				=> OnRepacked = (RowDelegate<PozycjaSzkoleniaRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<PozycjaSzkoleniaRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<PozycjaSzkoleniaRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<PozycjaSzkoleniaRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<PozycjaSzkoleniaRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<PozycjaSzkoleniaRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<PozycjaSzkoleniaRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<PozycjaSzkoleniaRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<PozycjaSzkoleniaRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<PozycjaSzkoleniaRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

	}

	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public static class StaticsSzkolenieModule {
		public static SzkolenieModule GetSzkolenie(this Session session) => SzkolenieModule.GetInstance(session);

		public static TResult Record<TResult>(this IRecordInvoker<PozycjaSzkolenia, TResult> row, Action<SzkolenieModule.PozycjaSzkoleniaRecord> action)
		    => row.InvokeAction(action, (rec, act) => ((Action<SzkolenieModule.PozycjaSzkoleniaRecord>)act)((SzkolenieModule.PozycjaSzkoleniaRecord)rec));
	}

}

